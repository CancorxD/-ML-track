import os
import json
from pathlib import Path
from typing import List, Dict, Any

import torch
from diffusers import StableDiffusionPipeline
from PIL import Image

# If using the new 'openai' package (OpenAI()), import and use that:
from openai import OpenAI

# local script
from scripts import input_handler

# ---------- CONFIG ----------
# Get API key from environment (safer). In Colab set it in a secret or env var.
OPENAI_API_KEY = ""
if not OPENAI_API_KEY:
    raise RuntimeError("Set OPENAI_API_KEY in environment before running (do NOT hardcode keys).")

# Create OpenAI client once
client = OpenAI(api_key=OPENAI_API_KEY)

# ---------- Stable Diffusion pipeline setup ----------
use_cuda = torch.cuda.is_available()

if use_cuda:
    torch_dtype = torch.float16
    device = "cuda"
else:
    torch_dtype = torch.float32
    device = "cpu"

# load model (may require large VRAM)
try:
    pipe = StableDiffusionPipeline.from_pretrained(
        "runwayml/stable-diffusion-v1-5",
        torch_dtype=torch_dtype
    )
    pipe = pipe.to(device)
except Exception as e:
    raise RuntimeError("Failed to load Stable Diffusion pipeline: " + str(e))


# ---------- Helpers ----------
def generate_frame(prompt: str, seed: int = 42, steps: int = 50):
    """Return a PIL.Image generated by the pipeline."""
    if device == "cuda":
        generator = torch.Generator(device="cuda").manual_seed(seed)
    else:
        generator = torch.Generator(device="cpu").manual_seed(seed)

    result = pipe(
        prompt,
        num_inference_steps=steps,
        generator=generator,
        guidance_scale=7.5
    )
    return result.images[0]


def generate_shot_list(script: str) -> List[Dict[str, Any]]:
    """Ask the LLM to produce a JSON list of shots. Returns list or raises."""
    prompt = f"""
Given the following script: "{script}"
Generate a list of 6–10 detailed scene descriptions for a storyboard. Each scene should include:
- A short description of the action.
- Visual details (Aldar Köse's appearance, setting, camera angle).
- Ensure Aldar Köse is recognizable (e.g., wears traditional Kazakh clothing, has a cunning smile).
Return the result as a JSON list with fields 'frame' and 'description'.
"""
    resp = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )

    raw_text = resp.choices[0].message.content
    try:
        shots = json.loads(raw_text)
        if not isinstance(shots, list):
            raise ValueError("Model returned JSON but not a list.")
        return shots
    except Exception as exc:
        # If parsing fails, report the model output for debugging and raise
        print("Warning: failed to parse model JSON. Raw output:")
        print(raw_text)
        raise RuntimeError("Failed to parse JSON from model: " + str(exc))


def save_info(shot_list: List[Dict[str, Any]]) -> str:
    """Save index.json and generate frame images."""
    description_path = Path("storyboard") / "index.json"
    description_path.parent.mkdir(parents=True, exist_ok=True)

    with description_path.open("w", encoding="utf-8") as f:
        json.dump(shot_list, f, ensure_ascii=False, indent=4)

    # generate frames
    for shot in shot_list:
        frame_num = shot.get("frame")
        desc = shot.get("description")
        if frame_num is None or desc is None:
            print("Skipping shot (missing 'frame' or 'description'):", shot)
            continue

        prompt = (
            f"{desc}, Aldar Köse, middle-aged man, short bushy beard, "
            "cunning smile, wearing colorful Kazakh robe and feathered hat, "
            "consistent style, cinematic lighting, ultra-realistic, detailed face, detailed background"
        )

        # optionally vary seed per frame for variety
        seed = 42 + int(frame_num)
        try:
            image = generate_frame(prompt, seed=seed)
            image_path = description_path.parent / f"frame_{frame_num}.png"
            image.save(image_path)
            print("Saved", image_path)
        except Exception as e:
            print(f"Failed to generate/save frame {frame_num}: {e}")

    return f"Descriptions saved to: {description_path}"


# ---------- Main ----------
if __name__ == "__main__":
    script = input_handler.get_prompt("Введите сценарий (2–4 предложения, описывающие историю с Aldar Köse): ")
    print("Введённый сценарий:", script)

    # generate shot list (LLM)
    try:
        shot_list = generate_shot_list(script)
    except RuntimeError as e:
        print("Falling back to the predefined shot list due to error:", e)
        shot_list = [
            {'frame': 1, 'description': "Aldar Köse approaches the greedy merchant's stall with a cunning smile on his face. Aldar Köse, dressed in traditional Kazakh clothing with a feathered hat, waltzes up to a bustling marketplace. His cunning smile is framed by his bushy beard. The camera angle is from a low position, making Aldar appear larger than life."},
            {'frame': 2, 'description': 'Aldar Köse and the merchant engage in a lively conversation, Aldar pointing to a horse. Aldar gestures excitedly to a sturdy horse tied up nearby. The merchant, a portly man draped in luxurious robes, looks intrigued yet cautious. The camera captures their exchange from a middle-long shot angle.'},
            {'frame': 3, 'description': "Aldar Köse hatches his plan and begins to spin his elaborate scheme to the merchant. The scene is shot from the merchant's perspective. Aldar leans in, speaking in hushed tones. His eyes sparkle with a hint of mischief."},
            {'frame': 4, 'description': "The merchant seems skeptical, but Aldar continues his persuasive tactics. The camera switches to a high angle shot focusing on Aldar, capturing the merchant's hesitant expressions and Aldar's determined, cunning face."},
            {'frame': 5, 'description': "Winning over the merchant, Aldar Köse shakes hands with him to finalize the deal. A close shot of their handshake, Aldar's grin is even wider, but the merchant still appears unsure. The transaction is happening under the bright midday sun, casting vibrant colors over the bustling marketplace."},
            {'frame': 6, 'description': "Aldar takes the reins of the horse and mounts it, waving the merchant farewell. The camera transitions to a long shot as Aldar hops onto the horse. Aldar's vibrant traditional clothes stand out against the dusty marketplace ground."},
            {'frame': 7, 'description': 'Aldar rides away from the merchant, still laughing and waving. Captured from a low angle, Aldar looks triumphant as he rides away on his newly acquired horse. His laughter can be visually perceived through his wide-open mouth and uplifted head.'},
            {'frame': 8, 'description': "The merchant, left in Aldar's dust, realizes his mistake. Shot from Aldar's perspective, the merchant stands alone in the marketplace, a shocked expression on his face as he grasps the emptiness of his mistake. The surrounding crowd seem oblivious, carrying on with their trading."}
        ]

    # save and create frames
    result_msg = save_info(shot_list)
    print(result_msg)
